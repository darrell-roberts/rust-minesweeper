var searchIndex = JSON.parse('{\
"rust_minesweeper":{"doc":"","t":[4,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,0,5,11,5,5,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,3,3,4,13,3,3,13,4,13,13,13,3,3,13,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5],"n":["Command","Command","Dimension","Flag","IO","InvalidCommand","Open","Quit","borrow","borrow","borrow_mut","borrow_mut","eq","equivalent","fmt","fmt","fmt","from","from","from","from","from_str","game_loop","into","into","lib","main","ne","parse_command","parse_coords","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","Active","Board","Cell","CellState","Closed","Dimension","DimensionParser","ExposedMine","GameState","Loss","New","Open","Pos","ProgramArgs","Win","ZeroDimension","adjacent_mines","augment_args","augment_args_for_update","board_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cells","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","columns","columns","default","default","deref","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","expand","expose_mines","flag_cell","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","game","into","into","into","into","into","into","into","into","into","into_app","into_app_for_update","is_win","mine_board","ne","ne","ne","new","open_cell","parse_ref","partial_cmp","rows","rows","state","state","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","total_adjacent_mines","total_mines","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_parser","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","x","y","flagged","mined","adjacent_cells"],"q":["rust_minesweeper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_minesweeper::Command","","rust_minesweeper::InvalidCommand","","","rust_minesweeper::librust_minesweeper::lib::CellState","","rust_minesweeper::lib::game"],"d":["User command.","","","","","Invalid command error.","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Main game loop. Draws the board and takes user input until …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Game types and trait implementations.","Parse command line arguments and start game.","","Parse user input.","Parse coordinates provided by user.","","","","","","","","","","","","","","","","","","Game board.","Board cell.","State of the cell.","","Newtype wrapper for non-zero cartesian coordinate.","Clap parser for ZeroDimension type.","","State of the game.","","","","Cell position on the board.","Command line arguments.","","A non-zero unsigned 8 bit integer.","","","","Get the number of board cells.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Open all adjacent cells that are not mined or flagged.","Expose all mined cells on the board.","Flag the cell as being potentially mined.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Board implementation for handling game play.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Evaluate board to see if all non mined cells have been …","Randomly mine the board with a difficulty ratio. Exclude …","","","","Create a new board with the given columns and rows.","Open requested cell and expand if necessary.","","","","","Get the state of the board.","","","","","","","","","","","","Count how many adjacent positions are mined.","Get the total number of mined cells.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate adjacent positions from provided position."],"i":[0,1,1,2,1,0,2,2,2,1,2,1,2,2,2,1,1,2,1,1,1,2,0,2,1,0,0,2,0,0,1,1,2,1,2,1,2,1,2,1,3,4,5,6,7,8,9,0,0,0,10,0,0,10,0,9,9,10,0,0,9,0,11,12,12,13,12,8,14,15,11,16,10,9,13,12,8,14,15,11,16,10,9,13,13,8,15,11,16,10,8,15,11,16,10,16,12,13,11,10,8,8,16,10,9,8,16,10,9,13,13,13,8,8,14,14,15,11,11,16,10,9,13,13,12,8,14,15,11,16,10,9,13,12,12,0,12,8,14,15,11,16,10,9,13,12,12,13,13,8,16,10,13,13,15,16,12,13,13,11,13,8,15,11,16,10,8,14,11,13,13,13,12,8,8,14,15,11,16,10,9,13,12,8,14,15,11,16,10,9,13,12,8,14,15,11,16,10,9,13,12,12,8,12,8,14,15,11,16,10,9,13,16,16,17,17,0],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["command",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",3]]],[[["zerodimension",3]]],[[]],[[["str",0]],["result",4]],[[["board",3]]],[[]],[[]],null,[[]],[[["",0],["command",4]],["bool",0]],[[],["result",4,[["command",4],["invalidcommand",4]]]],[[["str",0],["str",0]],["result",4,[["pos",3],["invalidcommand",4]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["usize",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["dimension",3]],[[["",0]],["dimensionparser",3]],[[["",0]],["cell",3]],[[["",0]],["pos",3]],[[["",0]],["cellstate",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["ordering",4]],null,null,[[],["cell",3]],[[]],[[["",0]]],[[["",0],["dimension",3]],["bool",0]],[[["",0],["pos",3]],["bool",0]],[[["",0],["cellstate",4]],["bool",0]],[[["",0],["gamestate",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["pos",3]]],[[["",0]]],[[["",0],["pos",3]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[["",0]],["bool",0]],[[["",0],["pos",3]]],[[["",0],["dimension",3]],["bool",0]],[[["",0],["pos",3]],["bool",0]],[[["",0],["cellstate",4]],["bool",0]],[[["dimension",3],["dimension",3]]],[[["",0],["pos",3]]],[[["",0],["command",6],["option",4,[["arg",3]]],["osstr",3]],["result",4,[["error",3]]]],[[["",0],["",0]],["option",4,[["ordering",4]]]],null,null,[[["",0]],["gamestate",4]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0],["pos",3]],["u8",0]],[[["",0]],["usize",0]],[[],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["pos",3],["u8",0],["u8",0]]]],"p":[[4,"InvalidCommand"],[4,"Command"],[13,"Open"],[13,"Flag"],[13,"Command"],[13,"Dimension"],[13,"IO"],[3,"Dimension"],[4,"GameState"],[4,"CellState"],[3,"Cell"],[3,"ProgramArgs"],[3,"Board"],[3,"ZeroDimension"],[3,"DimensionParser"],[3,"Pos"],[13,"Closed"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};